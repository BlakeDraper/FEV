{"version":3,"sources":["app/map/geosearch.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAYA;gBAQI,4BAAY,QAA0B,EAAE,UAAsB;oBAFpD,kBAAa,GAAG,IAAI,mBAAY,EAAE,CAAC;oBAGzC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;oBAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBAED,qCAAQ,GAAR;oBACI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;oBAC1C,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;oBACjD,iCAAiC;gBACrC,CAAC;gBAED,iCAAI,GAAJ;oBAAA,iBAYC;oBAXG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;wBAAC,MAAM,CAAC;oBAAC,CAAC;oBAE9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;yBAClC,SAAS,CAAC,UAAA,QAAQ;wBACf,qCAAqC;wBACrC,sGAAsG;wBACtG,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;wBAChC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC;4BACpB,KAAK,EAAE,QAAQ,CAAC,UAAU;yBAC7B,CAAC,CAAC;oBACP,CAAC,EAAE,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,CAAC;gBACtC,CAAC;gBA1BD;oBAAC,aAAM,EAAE;;yEAAA;gBAZb;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,WAAW;wBACrB,WAAW,EAAE,oCAAoC;wBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;qBAEnD,CAAC;;sCAAA;gBAkCF,yBAAC;YAAD,CAjCA,AAiCC,IAAA;YAjCD,mDAiCC,CAAA","file":"app/map/geosearch.component.js","sourcesContent":["import {Component, Output, EventEmitter} from '@angular/core';\r\nimport {GeocodingService} from './geocode.service';\r\nimport {MapService} from './map.service';\r\nimport {Location} from './location.class';\r\nimport {Map} from 'leaflet';\r\n\r\n@Component({\r\n    selector: 'geosearch',\r\n    templateUrl: './app/map/geosearch.component.html',\r\n    styleUrls: ['./app/map/geosearch.component.css']\r\n    //styles: [ 'input { margin: 20px 0 0 20px; width: 300px; height: 35px; border: 2px solid rgba(77, 156, 237, 0.7) font-size: 16px;font: rgb(142, 142, 142);}', '#goto {margin: 20px 0 0 330px; width: 35px; height: 35px; text-align: center;}']\r\n})\r\nexport class GeosearchComponent {\r\n    address: string;\r\n\r\n    private geocoder: GeocodingService;\r\n    private map: Map;\r\n    private mapService: MapService;\r\n    @Output() locationFound = new EventEmitter();\r\n\r\n    constructor(geocoder: GeocodingService, mapService: MapService) {\r\n        this.address = '';\r\n        this.geocoder = geocoder;\r\n        this.mapService = mapService;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.mapService.disableMouseEvent('goto');\r\n        this.mapService.disableMouseEvent('place-input');\r\n        //this.map = this.mapService.map;\r\n    }\r\n\r\n    goto() {\r\n        if (!this.address) { return; }\r\n\r\n        this.geocoder.geocode(this.address)\r\n        .subscribe(location => {\r\n            //map.fitBounds(location.viewBounds);\r\n            //emit event to say location is found, then send the location info out and allow map to do the zooming\r\n            this.address = location.address;\r\n            this.locationFound.emit({\r\n                value: location.viewBounds\r\n            });\r\n        }, error => console.error(error));\r\n    }\r\n}"],"sourceRoot":"/source/"}