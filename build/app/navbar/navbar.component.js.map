{"version":3,"sources":["app/navbar/navbar.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBAQI,yBAA4B,QAAiB,EAA4B,QAAY;oBAAzD,aAAQ,GAAR,QAAQ,CAAS;oBAA4B,aAAQ,GAAR,QAAQ,CAAI;oBAPtF,aAAQ,GAAW,oBAAoB,CAAC;oBACxC,mBAAc,GAAW,KAAK,CAAC;oBAIxB,YAAO,GAAW,KAAK,CAAC;oBAG1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBAGM,gCAAM,GAAb,UAAc,OAAgB;oBAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,OAAO,KAAK,WAAW,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC9E,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;4BACzB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;wBACzE,CAAC;oBACD,CAAC;gBACL,CAAC;gBAED,mCAAS,GAAT;oBACI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACtB,CAAC;gBACD,oCAAU,GAAV;oBACI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACvB,CAAC;gBA1BF;oBAAC,gBAAS,CAAC,OAAO,CAAC;;8DAAA;gBARtB;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,YAAY;wBACtB,UAAU,EAAE,CAAC,gCAAgB,CAAC;wBAC9B,WAAW,EAAE,oCAAoC;qBACpD,CAAC;+BASkD,aAAM,CAAC,2BAAQ,CAAC;;mCATlE;gBAgCF,sBAAC;YAAD,CA/BA,AA+BC,IAAA;YA/BD,6CA+BC,CAAA","file":"app/navbar/navbar.component.js","sourcesContent":["import {Component, Renderer, Inject, ViewChild} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport { MODAL_DIRECTIVES, ModalComponent } from 'ng2-bs3-modal/ng2-bs3-modal';\r\n\r\n@Component({\r\n    selector: 'fev-navbar',\r\n    directives: [MODAL_DIRECTIVES],\r\n    templateUrl: './app/navbar/navbar.component.html'\r\n})\r\nexport class NavbarComponent {\r\n   appTitle: string = \"Flood Event Viewer\";\r\n   appTitleMobile: string = \"FEV\";\r\n   @ViewChild('modal')\r\n   modal: ModalComponent;\r\n\r\n   public isShown:boolean = false;\r\n\r\n    public constructor( private renderer:Renderer, @Inject(DOCUMENT) private document:any) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n\r\n\r\n    public toggle(isShown?:boolean):void {\r\n        this.isShown = typeof isShown === 'undefined' ? !this.isShown : isShown;\r\n        if (this.document && this.document.body) {\r\n        this.renderer.setElementClass(this.document.body, 'isOpenMenu', this.isShown);\r\n        if (this.isShown === false) {\r\n            this.renderer.setElementProperty(this.document.body, 'scrollTop', 0);\r\n        }\r\n        }\r\n    }\r\n\r\n    modalOpen() {\r\n        this.modal.open();\r\n    }\r\n    modalClose() {\r\n        this.modal.close();\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}